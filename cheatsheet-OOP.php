<?php
/****---------------------****/
/***       TAH√ÅK OOP       ***/
/**-------------------------**/
/**  
 * N√≠≈æe je p≈ô√≠klad jednoduch√©ho OOP k√≥du, kter√Ω simuluje RPG hru.
 *                        
 *  Mimo z√°klad OOP syntaxe by bylo dobr√© vƒõdƒõt a popsat:
 *     - Co je to t≈ô√≠da a co objekt
 *     - Co je to metoda a ƒç√≠m se li≈°√≠ od funkce
 *     - Kdy vznik√° instance objektu (jak√° metoda ho skl√°d√°)
 *     - V√Ωznam promƒõnn√© "$this" a na co odkazuje
 *     - Zapouzd≈ôen√≠ a rozd√≠l mezi private/public
 *     - K ƒçemu a kdy vytv√°≈ôet getter/setter
 *     - Co je to dƒõdiƒçnost a jak mohu vytvo≈ôit potomka (child)
 * 
 *  D≈Øle≈æit√© ch√°pat R√°mec (SCOPE)  ->  Neboli KDE se nƒõjak√° ƒç√°st k√≥du nach√°z√≠ [funkce, metoda, objekt, globaln√≠ r√°mec]
 *  P≈ôemy≈°let nad t√≠m co dƒõl√°m a ƒçeho chci dos√°hnout je kl√≠ƒçov√©, aby jsme si mohli uvƒõdomit jak√© struktury/n√°stroje k tomu m√°me dostupn√© !!!
 *  Dok√°≈æu vygooglit specifik√Ω probl√©m/pojem (php.net, w3school, stackoverflow, chatgpt/gemini, atd) üôå
 *  Nejlep≈°√≠ je si v≈ædy spustit/otestovat kousek a p≈ôid√°vat postupnƒõ...
 */


// Rodiƒçovsk√° t≈ô√≠da "bytosti" nap≈ô. z pohledu hry
class Entity {
    // Z√°kladn√≠ vlastnosti t√©to t≈ô√≠dy na kter√Ωch budeme stavƒõt
    public $name;

    // Protected vlastnosti, 
    //  kter√© nechceme mƒõnit zvenƒç√≠, ale budou dostupn√© z potomk≈Ø (children)
    protected $health;
    protected $damage;


    // Konstruktor - zavolan√Ω p≈ôi vytvo≈ôen√≠ instance
    function __construct($name) {
        $this->name = $name;
        // Ne v≈ædy mus√≠me p≈ôedat hodnot -> m≈Ø≈æeme nastavit v√Ωchoz√≠ hodnoty
        $this->health = 100;
        $this->damage = 1;
    }

    // Metoda pro vyps√°n√≠ stavu entity
    public function printInfo() {
        echo "<br>~ $this->name ~ <br>";
        echo "HP: $this->health <br>";
        echo "DMG: $this->damage <br>";
    } 

    // Metoda pro zji≈°tƒõn√≠ stavu ≈æivota
    public function isAlive() {
        return $this->health > 0;
    }


    // Metoda pro √∫tok na jinou entitu 
    //   ! v≈°imnƒõte si, ≈æe metoda p≈ôij√≠m√° objekt typu Entity (zde mus√≠me zadat typ promƒõnn√©)
    public function attack(Entity $target) {
        $damage = $this->damage;

        echo $this->name . " ~~~> " . $target->name;
        echo " -$damage HP <br>";

        $target->health -= $this->damage;
    }
}



// Dƒõdiƒçnost - t≈ô√≠da nep≈ô√≠tel dƒõd√≠ vlastnosti a metody z t≈ô√≠dy "Entity"
class Enemy extends Entity {
    // P≈ôid√°v√°me nov√© vlastnosti
    public $deathSound;

    function __construct($name, $health, $damage, $deathSound) {
        // P≈ôid√°v√°me nov√© vlastnosti
        $this->deathSound = $deathSound;

        // Nastav√≠me vlastnosti z rodiƒçovsk√© t≈ô√≠dy
        $this->health = $health;
        $this->damage = $damage;
        $this->name = $name;

        // M≈Ø≈æeme taky volat p≈Øvodn√≠ konstruktor rodiƒçe,
        //  zde nen√≠ t≈ôeba jeliko≈æ v≈°echny hodnoty jsou nastaveny
        //parent::__construct($name);
    }

    // P≈ôepisujeme metodu z rodiƒçovsk√© t≈ô√≠dy
    public function printInfo() {
        echo "<br>~ $this->name ~ <br>";
        echo "HP: $this->health <br>";
        echo "DMG: $this->damage <br>";
    }

    // P≈ôepisujeme metodu smrti
    public function isAlive() {
        if ($this->health <= 0) {
            echo "<br> $this->deathSound <br>";
            return false;
        }
        return true;
    }
}


// Dƒõdiƒçnost - t≈ô√≠da "hr√°ƒç" dƒõd√≠ vlastnosti a metody z t≈ô√≠dy "Entity"
class Player extends Entity {
    // P≈ôid√°v√°me nov√© vlastnosti
    public $level = 1; // Zde taky m≈Ø≈æeme nastavit v√Ωchoz√≠ hodnotu

    // POKUD NEPOT≈òEBUJEME KONSTRUKTOR, NEMUS√çME HO P≈òEPISOVAT
    // function __construct() { ... }

    // P≈ôepisujeme metodu z rodiƒçovsk√© t≈ô√≠dy
    public function printInfo() {
        echo "<br>~ $this->name ~ <br>";
        echo "HP: $this->health <br>";
        echo "DMG: $this->damage <br>";
        echo "LVL: $this->level <br>";
    }

    // P≈ôid√°v√°me novou metodu
    public function levelUp() {
        $this->level++;
        $this->health += 10;
        $this->damage += 2;
    }
}


//////////////////////////////////
/// SESTAVEN√ç HERN√çCH OBJEKT≈Æ  ///
//////////////////////////////////

// Vytvo≈ôen√≠ instance objektu "hr√°ƒç"
$player = new Player("Hr√°ƒç");
$player->printInfo();
$player->levelUp();

// Vytvo≈ôen√≠ instance objektu "nep≈ô√≠tel"
$enemy = new Enemy("Nep≈ô√≠tel", 50, 5, "Aaaaaaargh");
$enemy->printInfo();




////////////////////
///  HRA ZAƒå√çN√Å  ///
////////////////////

// Deathmatch loop -> dokud jsou oba ≈æiv√≠, √∫toƒç√≠ na sebe
$round = 1;
while ($player->isAlive() && $enemy->isAlive()) {
    echo "<h3> ROUND $round </h3>";
    
    $player->attack($enemy);
    $enemy->attack($player);

    $round++;
    echo "<hr>";
}

// V√Ωsledek hry
if ($player->isAlive()) {
    echo "<h1> VYHR√ÅL JSI </h1>";
} else {
    echo "<h1> PROHR√ÅL JSI </h1>";
}